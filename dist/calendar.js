/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/plugins/calendar.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/core.js":
/*!*********************!*\
  !*** ./src/core.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst Bulma = {\n    /**\n     * Current BulmaJS version.\n     * @type {String}\n     */\n    VERSION: '0.5.0',\n\n    /**\n     * An index of the registered plugins\n     * @type {Object}\n     */\n    plugins: {},\n\n    /**\n     * Helper method to create a new plugin.\n     * @param  {String} key The plugin's key\n     * @param  {Object} options The options to be passed to the plugin\n     * @return {Object} The newly created plugin instance\n     */\n    create(key, options) {\n        if (!key || !Bulma.plugins.hasOwnProperty(key)) {\n            throw new Error('[BulmaJS] A plugin with the key \\'' + key + '\\' has not been registered.');\n        }\n\n        return Bulma.plugins[key].create(options);\n    },\n\n    /**\n     * Register a new plugin\n     * @param  {String} key The key to register the plugin under\n     * @param  {Object} plugin The plugin's main constructor\n     * @return {undefined}\n     */\n    registerPlugin(key, plugin) {\n        if (!key) {\n            throw new Error('[BulmaJS] Key attribute is required.');\n        }\n\n        this.plugins[key] = plugin;\n    },\n\n    /**\n     * Parse the HTML DOM searching for data-bulma attributes. We will then pass\n     * each element to the appropriate plugin to handle the required processing.\n     * \n     * @return {undefined}\n     */\n    traverseDOM() {\n        let elements = document.querySelectorAll(this.getPluginClasses());\n\n        elements.forEach(element => {\n            let plugin = this.findCompatiblePlugin(element);\n\n            if (plugin.hasOwnProperty('handleDomParsing')) {\n                plugin.handleDomParsing(element);\n            }\n        });\n    },\n\n    getPluginClasses() {\n        var classes = [];\n\n        for (var key in this.plugins) {\n            // FIXME: This is temporary, this check should not be required!\n            if (this.plugins[key].hasOwnProperty('getRootClass')) {\n                classes.push('.' + this.plugins[key].getRootClass());\n            }\n        }\n\n        return classes.join(',');\n    },\n\n    findCompatiblePlugin(element) {\n        for (var key in this.plugins) {\n            // FIXME: This is temporary, this check should not be required!\n            if (this.plugins[key].hasOwnProperty('getRootClass')) {\n                if (element.classList.contains(this.plugins[key].getRootClass())) {\n                    return this.plugins[key];\n                }\n            }\n        }\n    },\n\n    /**\n     * Create an element and assign classes\n     * @param {string} name The name of the element to create\n     * @param {array} classes An array of classes to add to the element\n     * @return {HTMLElement} The newly created element\n     */\n    createElement(name, classes) {\n        if (!classes) {\n            classes = [];\n        }\n\n        if (typeof classes === 'string') {\n            classes = [classes];\n        }\n\n        let elem = document.createElement(name);\n\n        classes.forEach(className => {\n            elem.classList.add(className);\n        });\n\n        return elem;\n    }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    Bulma.traverseDOM();\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bulma);\n\n//# sourceURL=webpack:///./src/core.js?");

/***/ }),

/***/ "./src/plugins/calendar.js":
/*!*********************************!*\
  !*** ./src/plugins/calendar.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core */ \"./src/core.js\");\n\n\n/**\n * @module Calendar\n * @since  0.3.0\n * @author  Thomas Erbe <vizuaalog@gmail.com>\n */\nclass Calendar {\n    /**\n     * Plugin constructor\n     * @param  {Object} options Plugin instance's options\n     * @return {this} The newly created instance\n     */\n    constructor(options) {\n        if (!options.element) {\n            throw new Error('[BulmaJS] The Calendar component requires an element.');\n        }\n\n        /**\n         * The root Calendar element.\n         * @type {HTMLElement}\n         */\n        this.root = options.element;\n\n        /**\n         * The input element this calendar belongs to.\n         * @type {HTMLElement|null}\n         */\n        this.inputElement = null;\n\n        if (this.root.nodeName === 'INPUT') {\n            this.inputElement = this.root;\n            this.root = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div');\n        }\n\n        /**\n         * The wrapper for the calendar\n         * @type {HTMLElement}\n         */\n        this.wrapper = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', ['calendar']);\n\n        /**\n         * The current date for today tests\n         * @type {Date}\n         */\n        this.now = new Date();\n\n        /**\n         * The date this calendar starts at\n         * @type {Date}\n         */\n        this.date = options.hasOwnProperty('date') ? options.date : this.now;\n\n        /**\n         * The current year for the calendar\n         * @type {int}\n         */\n        this.year = this.date.getFullYear();\n\n        /**\n         * The current month for the calendar\n         * @type {int}\n         */\n        this.month = this.date.getMonth();\n\n        /**\n         * Month names\n         * @type {Array}\n         */\n        this.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n        /**\n         * Short day names\n         * @type {Array}\n         */\n        this.shortDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n        /**\n         * Number of days in each month\n         * @type {Array}\n         */\n        this.monthDays = [31, this.isLeapYear(this.year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        /**\n         * Show the navigating buttons\n         * @type {boolean}\n         */\n        this.navButtons = options.hasOwnProperty('navButtons') ? options.navButtons : true;\n\n        /**\n         * The format string for the date output. Used when attached to an input element.\n         * @type {string}\n         */\n        this.format = options.hasOwnProperty('format') ? options.format : 'yyyy-mm-dd';\n\n        /**\n         * Should the calendar be shown as a modal. Used when attached to an input element\n         * @type {boolean}\n         */\n        this.overlay = options.hasOwnProperty('overlay') ? options.overlay : false;\n\n        if (this.overlay) {\n            this.buildModal();\n        }\n\n        if (this.inputElement !== null) {\n            this.inputElement.addEventListener('focus', event => {\n                this.handleInputFocus(event);\n            });\n        }\n\n        this.render();\n    }\n\n    ////////////////////////////////////////\n    ///// HELPER METHODS TO BUILD HTML /////\n    ////////////////////////////////////////\n\n    /**\n     * If we are to show as an overlay, build the modal's HTML\n     * @return {undefined}\n     */\n    buildModal() {\n        this.modal = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', ['modal']);\n        this.modalBackground = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', ['modal-background']);\n\n        let modalClose = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', ['modal-close']);\n\n        modalClose.addEventListener('click', () => {\n            this.modal.classList.remove('is-active');\n        });\n\n        this.modal.appendChild(this.modalBackground);\n        this.modal.appendChild(modalClose);\n\n        this.root.appendChild(this.modal);\n\n        this.wrapper.style.zIndex = 40;\n    }\n\n    /**\n     * Build the calendars nav HTML\n     * @return {undefined}\n     */\n    buildNav() {\n        let prevIcon, nextIcon;\n        let nav = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-nav');\n        let navLeft = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-nav-left');\n        let navRight = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-nav-right');\n\n        // Left side of nav (prev year/month buttons)\n        if (this.navButtons) {\n            this.prevYearButton = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', ['button', 'is-text']);\n            prevIcon = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('i', ['fa', 'fa-backward']);\n            this.prevYearButton.appendChild(prevIcon);\n\n            this.prevYearButton.addEventListener('click', event => {\n                this.handlePrevYearClick(event);\n            });\n\n            navLeft.appendChild(this.prevYearButton);\n\n            this.prevMonthButton = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', ['button', 'is-text']);\n            prevIcon = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('i', ['fa', 'fa-chevron-left']);\n            this.prevMonthButton.appendChild(prevIcon);\n\n            this.prevMonthButton.addEventListener('click', event => {\n                this.handlePrevMonthClick(event);\n            });\n\n            navLeft.appendChild(this.prevMonthButton);\n\n            // Right side of nav (next year/month buttons)\n            this.nextMonthButton = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', ['button', 'is-text']);\n            nextIcon = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('i', ['fa', 'fa-chevron-right']);\n            this.nextMonthButton.appendChild(nextIcon);\n\n            this.nextMonthButton.addEventListener('click', event => {\n                this.handleNextMonthClick(event);\n            });\n\n            navRight.appendChild(this.nextMonthButton);\n\n            this.nextYearButton = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', ['button', 'is-text']);\n            prevIcon = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('i', ['fa', 'fa-forward']);\n            this.nextYearButton.appendChild(prevIcon);\n\n            this.nextYearButton.addEventListener('click', event => {\n                this.handleNextYearClick(event);\n            });\n\n            navRight.appendChild(this.nextYearButton);\n        }\n\n        // Month/year label\n        this.monthYearLabel = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div');\n        this.monthYearLabel.innerHTML = this.months[this.month] + ' ' + this.year;\n\n        nav.appendChild(navLeft);\n        nav.appendChild(this.monthYearLabel);\n        nav.appendChild(navRight);\n\n        return nav;\n    }\n\n    /**\n     * Build the calendar's container HTML\n     * @return {HTMLElement} The calendar's container\n     */\n    buildContainer() {\n        return _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-container');\n    }\n\n    /**\n     * Build the calendar's header HTML\n     * @return {HTMLElement} The calendar's header element\n     */\n    buildHeader() {\n        let calendarHeader = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-header');\n\n        this.shortDays.forEach(dayName => {\n            let day = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-date');\n            day.innerHTML = dayName;\n            calendarHeader.appendChild(day);\n        });\n\n        return calendarHeader;\n    }\n\n    /**\n     * Build the calendar's body. This includes all days.\n     * @return {HTMLElement} The calendar's body element\n     */\n    buildBody() {\n        let calendarBody = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-body');\n\n        let daysInMonth = this.monthDays[this.now.getMonth()];\n\n        // Number of days to show from the previous month.\n        let daysBefore = new Date(this.year, this.month, 1).getDay();\n\n        // Number of days to show from the next month\n        let daysAfter;\n\n        let numDays = daysInMonth + daysBefore;\n\n        daysAfter = numDays;\n        while (daysAfter > 7) {\n            daysAfter -= 7;\n        }\n\n        numDays += 7 - daysAfter;\n\n        let cells = [];\n\n        for (let i = 0; i < numDays; i++) {\n            let d = new Date(this.year, this.month, 1 + (i - daysBefore));\n\n            let today = false;\n            let thisMonth = false;\n\n            if (d.getFullYear() === this.now.getFullYear() && d.getMonth() === this.now.getMonth() && d.getDate() === this.now.getDate()) {\n                today = true;\n            }\n\n            if (d.getMonth() === this.month) {\n                thisMonth = true;\n            }\n\n            cells.push({\n                day: d.getDate(),\n                isToday: today,\n                isThisMonth: thisMonth\n            });\n        }\n\n        cells.forEach(day => {\n            let d = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'calendar-date');\n\n            if (!day.isThisMonth) {\n                d.classList.add('is-disabled');\n            }\n\n            let button = _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', 'date-item');\n\n            if (this.inputElement !== null && day.isThisMonth) {\n                button.addEventListener('click', event => {\n                    this.handleDayClick(event, day);\n                });\n            }\n\n            if (day.isToday) {\n                button.classList.add('is-today');\n            }\n\n            button.innerHTML = day.day;\n\n            d.appendChild(button);\n\n            calendarBody.appendChild(d);\n        });\n\n        return calendarBody;\n    }\n\n    //////////////////////////\n    ///// EVENT HANDLERS /////\n    //////////////////////////\n\n    /**\n     * Called when the input box is in focus.\n     * @return {undefined}\n     */\n    handleInputFocus() {\n        if (this.overlay) {\n            this.modal.classList.add('is-active');\n        }\n\n        this.inputElement.parentNode.insertBefore(this.root, this.inputElement.nextSibling);\n    }\n\n    /**\n     * Event hander for when a day is clicked.\n     * @param {Object} event The event object\n     * @param {Object} day The day that was clicked\n     * @return {undefined}\n     */\n    handleDayClick(event, day) {\n        day = new Date(this.year, this.month, day.day);\n\n        let dateString = this.formatDateString(day);\n\n        this.inputElement.value = dateString;\n\n        if (this.overlay) {\n            this.modal.classList.remove('is-active');\n        } else {\n            this.inputElement.parentNode.removeChild(this.root);\n        }\n    }\n\n    /**\n     * Event handler for the previous month button.\n     * @return {undefined}\n     */\n    handlePrevMonthClick() {\n        this.month--;\n\n        if (this.month < 0) {\n            this.year--;\n            this.month = 11;\n        }\n\n        this.render();\n    }\n\n    /**\n     * Event handler for the next month button.\n     * @return {undefined}\n     */\n    handleNextMonthClick() {\n        this.month++;\n\n        if (this.month > 11) {\n            this.year++;\n            this.month = 0;\n        }\n\n        this.render();\n    }\n\n    /**\n     * Event handler for the previous year button.\n     * @return {undefined}\n     */\n    handlePrevYearClick() {\n        this.year--;\n\n        this.render();\n    }\n\n    /**\n     * Event handler for the next year button.\n     * @return {undefined}\n     */\n    handleNextYearClick() {\n        this.year++;\n\n        this.render();\n    }\n\n    /**\n     * Format the date based on the supplied format string.\n     * @param {Object} day Date object representing the day to format\n     * @returns {string} The formatted date string\n     */\n    formatDateString(day) {\n        let dateString = this.format;\n\n        // May be a better/faster way of doing this?\n        if (dateString.indexOf('yyyy') !== -1) {\n            dateString = this.format.replace('yyyy', day.getFullYear());\n        } else {\n            dateString = this.format.replace('yy', day.getFullYear().toString().substr(-2));\n        }\n\n        if (dateString.indexOf('mm') !== -1) {\n            let month = day.getMonth() + 1;\n            if (month < 10) {\n                month = '0' + month.toString();\n            }\n            dateString = dateString.replace('mm', month);\n        } else {\n            dateString = dateString.replace('m', day.getMonth() + 1);\n        }\n\n        if (dateString.indexOf('dd') !== -1) {\n            let date = day.getDate();\n            if (date < 10) {\n                date = '0' + date.toString();\n            }\n            dateString = dateString.replace('dd', date);\n        } else {\n            dateString = dateString.replace('d', day.getDate());\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Clear the calendar HTML, ready for a re-render.\n     * @return {undefined}\n     */\n    clearCalendar() {\n        while (this.wrapper.firstChild) {\n            this.wrapper.removeChild(this.wrapper.firstChild);\n        }\n    }\n\n    /**\n     * Check if the passed year is a leap year.\n     * @param {int} year The year to check against\n     * @return {boolean} Is the year a leap year or not\n     */\n    isLeapYear(year) {\n        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951\n        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    }\n\n    /**\n     * Render/build the calendar's HTML.\n     * @return {undefined}\n     */\n    render() {\n        this.clearCalendar();\n\n        this.wrapper.appendChild(this.buildNav());\n\n        let container = this.buildContainer();\n        container.appendChild(this.buildHeader());\n        container.appendChild(this.buildBody());\n\n        this.wrapper.appendChild(container);\n\n        if (this.overlay) {\n            this.modal.insertBefore(this.wrapper, this.modalBackground.nextSibling);\n            this.root.appendChild(this.modal);\n        } else {\n            this.root.appendChild(this.wrapper);\n        }\n    }\n\n    /**\n     * Helper method used by the Bulma core to create a new instance.\n     * @param  {Object} options The new calendar's options\n     * @return {Calendar} The newly created calendar instance\n     */\n    static create(options) {\n        return new Calendar(options);\n    }\n\n    /**\n     * Handle parsing the DOMs data attribute API.\n     * @return {undefined}\n     */\n    static handleDomParsing() {\n        return;\n    }\n}\n\n_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerPlugin('calendar', Calendar);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Calendar);\n\n//# sourceURL=webpack:///./src/plugins/calendar.js?");

/***/ })

/******/ });